package com.dxc.darklight.control;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.dxc.darklight.model.IndividualStockNews;
import com.dxc.darklight.model.StockModelMount;
import com.dxc.darklight.model.User;
import com.dxc.darklight.service.IndividualStockNewsService;
import com.dxc.darklight.service.StockInfoService;
import com.dxc.darklight.service.DealMountModelService;
import com.dxc.darklight.service.UserService;
import com.dxc.darklight.service.UserStockService;
import com.dxc.darklight.util.CommonUtil;

@Controller
@RequestMapping("/stock")
public class UserStockController {

	@Autowired
	DealMountModelService stockModelMountService;

	@Autowired
	UserService userService;
	
	@Autowired
	private IndividualStockNewsService individualStockNewsService;
	
	@Autowired
	UserStockService userStockService;
	
	

	@RequestMapping("/list")
	public ModelAndView stockList(String userId, HttpSession httpSession) {
		ModelAndView mv = null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StockModelMount> stockMountList = new ArrayList<StockModelMount>();
		if(!CommonUtil.isEmpty(userId)){	
			httpSession.setAttribute("user", userService.getUserById(userId));
			stockMountList = stockModelMountService.getStockModelMountList(userId);
		} else {
			stockMountList = null;
		}
		map.put("stockMountList", stockMountList);
		mv = new ModelAndView("userStocks", map);
		return mv;
	}
	
	@RequestMapping(value = "/detail", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView detailStockNews(String id,String stockCode, HttpSession httpSession) {
		Map<String, Object> data = new HashMap<String, Object>();		
		ModelAndView mv=null;
			StockModelMount stockNewsDetail =this.stockModelMountService.getStockModelResult(stockCode);
			stockNewsDetail.setStockCode(CommonUtil.formatStockCode(stockNewsDetail.getStockCode()));
			data.put("stockNewsDetail", stockNewsDetail);
			
			List<IndividualStockNews> stockNewslist = individualStockNewsService.listIndiStockNews(stockCode);
			data.put("stockNewsList", stockNewslist);
			
			mv = new ModelAndView("stocknewsDetail", data);
		
		return mv;
	}
	
	@RequestMapping(value = "/collect", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView collectFavoriteNews( String stockCode, HttpSession httpSession) {
		ModelAndView mv = null;
		User user = (User) httpSession.getAttribute("user");
		Map<String, Object> data = new HashMap<String, Object>();		
		if(user!=null&&!CommonUtil.isEmpty(user.getUserId())){
			userStockService.saveFavoriteStock(user.getUserId(), stockCode);
			data.put("result", 0);
			 mv = new ModelAndView(new MappingJackson2JsonView(), data);
		} else {
			data.put("result", 1);
			 mv = new ModelAndView(new MappingJackson2JsonView(), data);
		}
		return mv;
	}
	
	@RequestMapping(value = "/cancel", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView deleteFavoriteNews(String stockCode, HttpSession httpSession) {
		User user = (User) httpSession.getAttribute("user");
		ModelAndView mv = null;
		Map<String, Object> data = new HashMap<String, Object>();		
		if(user!=null&&!CommonUtil.isEmpty(user.getUserId()))
			userStockService.deleteFavoriteStock(stockCode, user.getUserId());
		data.put("result", 0);
		 mv = new ModelAndView(new MappingJackson2JsonView(), data);
		 return mv;
	}
	
	@RequestMapping(value = "/collectByManual", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView collectByManual( String stockCode, HttpSession httpSession) {
		ModelAndView mv = null;
		User user = (User) httpSession.getAttribute("user");
		Map<String, Object> data = new HashMap<String, Object>();		
		if(user!=null&&!CommonUtil.isEmpty(user.getUserId())){
			StockModelMount stockNewsDetail = stockModelMountService.getStockModelResult(stockCode);
			if(stockNewsDetail !=null ) {
				if(userStockService.saveFavoriteStock(user.getUserId(), stockCode)) {
					data.put("result", 0);
					data.put("stockDetail", stockNewsDetail);
					
				} else {
					data.put("stockDetail", stockNewsDetail);
					data.put("result", 1);
				}
			} else {
				data.put("result", 2);
			}
			
			 mv = new ModelAndView(new MappingJackson2JsonView(), data);
		} else {
			data.put("result", 1);
			 mv = new ModelAndView(new MappingJackson2JsonView(), data);
		}
		return mv;
	}
}
